#!/usr/bin/env python
#
# Script to mount and launch OPK archives.
#
# Copyright 2013 Paul Cercueil <paul@crapouillou.net>
#
# Opkrun is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# Opkrun is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Opkrun.  If not, see <http://www.gnu.org/licenses/>
  
from os  import chdir, mkdir, execl, system, getenv
from sys import argv
from opk import read_metadata

enable_vtcon = True
vtcon_bind_file = "/sys/devices/virtual/vtconsole/vtcon1/bind"

def enable_vtcon():
	with open(vtcon_bind_file, "w") as fd:
		fd.write("1")


def path_transform(path):
	if path[0] == '/':
		return path
	return "%s/%s" % (getenv("PWD"), path)

def main():
	if len(argv) < 3:
		print "Usage: opkrun metadata_filename app.opk app_args..."
		return 0

	opk_mdata = read_metadata(argv[2])
	if argv[1] not in opk_mdata.keys():
		raise IOError("Metadata file not found in OPK")

	mdata = opk_mdata[argv[1]]['Desktop Entry']
	if mdata['Type'] != "Application":
		raise IOError("Given metadata is not for an application")

	elf = "./%s" % mdata['Exec']

	if "%f" in elf:
		if len(argv) == 4:
			elf = elf.replace("%f", "\'%s\'" % path_transform(argv[3]))
		else:
			if len(argv) < 4:
				print "WARNING: Application expects one argument"
			elif len(argv) > 4:
				print "WARNING: Application expects one argument, but more were passed"
			elf = elf.replace("%f", "")

	elif "%F" in elf:
		if len(argv) < 4:
			print "WARNING: Application expects arguments"
			elf = elf.replace("%F", "")
		else:
			args = argv[3]
			for arg in argv[4:]:
				args += " \'%s\'" % path_transform(arg)
			elf = elf.replace("%F", args)

	elif len(argv) > 3:
		print "WARNING: Arguments ignored, application doesn't need any"

	mountpoint = "/mnt/" + mdata['Name']
	try:
		mkdir(mountpoint)
	except OSError:
		pass

	mount_cmd = "mount -o loop,nosuid,ro " + argv[2] + " " + mountpoint
	if system(mount_cmd) != 0:
		raise IOError("Unable to mount OPK")

	try:
		if enable_vtcon and mdata["Terminal"].lower() == "true":
			enable_vtcon()
	except KeyError:
		pass

	elf += " ; umount -l " + mountpoint + " ; rmdir " + mountpoint

	chdir(mountpoint)
	execl("/bin/sh", "/bin/sh", "-c", elf)


if __name__ == "__main__":
	main()
